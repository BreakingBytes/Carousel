.. _tutorial-1:

Tutorial 1: Outputs
===================
One of the first steps in modeling is to decide what the desired outputs should
be. For example, the outputs of a PV power simulation might be hourly energy and
the corresponding timestamps. In this tutorial we'll demonstrate how to specify
the outputs for a Carousel model. We use the term *outputs* to refer to the
results from calculations. We'll explain what the term *calculations* refers to
in :ref:`the next tutorial <tutorial-2>`, and we'll define the term *models* in
:ref:`the last tutorial <tutorial-5>`.

As discussed in :ref:`getting-started` there are two styles for specifying
Carousel parameters. First we'll show how to specify the output parameters
directly in an output subclass since this is the preferred method. Later we will
also show how to specify output parameters in a JSON file.

Outputs Class
-------------
We'll need to create a new Python module inside the ``pvpower`` package created
by running ``carousel-quickstart``. We can actually define all of our Carousel
parameters in this file. Let's call the new module ``performance.py``. Inside
the new module, we'll have to import the :class:`~carousel.core.outputs.Output`
class so we can create a subclass to hold our output specifications. To specify
hourly energy, the corresponding timestamps and some other outputs for the PV
power performance model, copy the following snippet into the new module::

    """
    PV power performance simulation
    """

    from carousel.core.outputs import Output


    class PVPowerOutputs(Output):
        """
        Outputs for PV Power demo
        """
        timestamps = {"isconstant": True, "size": 8761}
        hourly_energy = {
            "isconstant": True, "timeseries": "hourly_timeseries",
            "units": "W*h",
            "size": 8760
        }
        hourly_timeseries = {"isconstant": True, "units": "W*h", "size": 8760}
        monthly_energy = {"isconstant": True, "units": "W*h", "size": 12}
        annual_energy = {"isconstant": True, "units": "W*h"}

Outputs Registry
~~~~~~~~~~~~~~~~
When the model is initialized, the outputs from all output subclasses in the
model are stored together in a dictionary called the output *registry*. When the
simulation is executed, the output values are stored and retrieved from the
registry as needed. The :ref:`last tutorial <tutorial-5>` will explain more
about Carousel registries and how they're used.

Output Attributes
~~~~~~~~~~~~~~~~~
In the snippet above each output is specified as a class attribute defined by a
dictionary of attributes such as units, initial value and size. The output
attributes are also stored in the registry. The following attributes can be set
in the output subclass:

============  =========================================
Attribute     Description
============  =========================================
units         output units
init          initial value
isproperty    material property flag
isconstant    constant value flag
size          array size
timeseries    name of corresponding timeseries output
============  =========================================

Attributes can be skipped or set to ``None`` if necessary. There are also
some output attributes such as uncertainty and variance that are calculated
during the simulation and therefore should not be specified in advance. The
following attributes are generated by Carousel:

+---------------+-------------------------------------------------------------+
| Attribute     | Description                                                 |
+===============+=============================================================+
| uncertainty   | square roots of variance diagonal components                |
+---------------+-------------------------------------------------------------+
| variance      | dictionary of covariance between formula outputs            |
+---------------+-------------------------------------------------------------+
| jacobian      | dictionary of sensitivities between formula inputs and      |
|               | outputs                                                     |
+---------------+-------------------------------------------------------------+
| output_source | name of the class in which outputs were specified           |
+---------------+-------------------------------------------------------------+

Material Property Flag
++++++++++++++++++++++
Outputs of dynamic calculations that represent a material property remain at the
last value when the calculation is skipped because a simulation threshold is
exceeded. For example, PV performance degradation is an output that is a
material property. When performance is not calculated, for example at night, the
accumulated degradation remains at the last calculated value. On the other hand
PV cell power is not a material property; when not calculatd it would revert to
a default value.

Constant Value Flag and Timeseries
++++++++++++++++++++++++++++++++++
Constant values do not change during dynamic calculations. This flag has no
effect on static calculations and is only used by in dynamic calculations to
resize outputs for output.

The timeseries output attribute is optional and is not currently used in
Carousel. However it can be used to indicate the index of an output that is a
timeseries perhaps making generation of a ``pandas.DataFrame`` easier.

Parameter File
--------------
The alternate style of specifying output parameters for each calculation is to
use JSON to list the desired outputs and their attributes in a file in the
``outputs`` folder of the project.

For example create ``PVPower/outputs/pvpower.json`` and paste the following
snippet::

    {
      "timestamps": {"isconstant": true, "size": 8761},
      "hourly_energy": {
        "isconstant": true, "timeseries": "hourly_timeseries", "units": "W*h",
        "size": 8760
      },
      "hourly_timeseries": {"isconstant": true, "units": "W*h", "size": 8760},
      "monthly_energy": {"isconstant": true, "units": "W*h", "size": 12},
      "annual_energy": {"isconstant": true, "units": "W*h"}
    }

To tell Carousel to use these outputs, we need to create a new Python module in
the ``pvpower`` package, let's call it ``performance.py`` ike in the example
above, and specify the file and path to the output parameter file in a
:class:`~carousel.core.outputs.Output` subclass::

    from carousel.core.outputs import Output
    import os
    from pvpower import PROJ_PATH


    class PVPowerOutputs(Output):
        outputs_file = 'pvpower.json'
        outputs_path = os.path.join(PROJ_PATH, 'outputs')

